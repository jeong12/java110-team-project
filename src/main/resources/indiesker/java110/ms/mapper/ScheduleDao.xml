<?xml version="1.0" encoding="UTF-8"?>
<!-- MemberDao 클래스가 사용할 SQL이 들어 있는 파일 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="indiesker.java110.ms.dao.ScheduleDao">

	<resultMap type="Schedule" id="perscheduleMap">
		<id column="psno" property="sno" />
		<result column="shopname" property="shopname" />
		<result column="addr" property="addr" />
		<result column="sdt" property="sdt" />
		<result column="edt" property="edt" />
		<result column="cnt" property="cnt" />
		<result column="cdt" property="cdt" />
		<result column="flag" property="flag" />
		<result column="x" property="x" />
		<result column="y" property="y" />
	</resultMap>

	<resultMap type="Schedule" id="buskerscheduleMap">
		<id column="brno" property="sno" />
		<result column="name" property="shopname" />
		<result column="addr" property="addr" />
		<result column="sdt" property="sdt" />
		<result column="edt" property="edt" />
		<result column="cnt" property="cnt" />
		<result column="flag" property="flag" />
		<result column="cdt" property="cdt" />
		<result column="phot" property="photo" />
		<result column="buskname" property="buskname" />
		<association property="supporter" javaType="supporter">
			<id column="sno" property="no" />
			<result column="name" property="name" />
			<result column="bas_addr" property="baseaddr" />
			<result column="det_addr" property="detailaddr" />
			<result column="genre" property="sgnere" />
			<result column="capa" property="capa" />
			<result column="tel" property="tel" />
			<result column="etc" property="message" />
			<result column="x" property="x" />
			<result column="y" property="y" />
		</association>
	</resultMap>
    
    <resultMap type="Schedule" id="reqStageScheduleMap">
        <id column="brno" property="sno" />
        <result column="cdt" property="cdt" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <result column="cnt" property="cnt" />
        <result column="flag" property="flag" />
        <!-- <result column="x" property="x"/> <result column="y" property="y"/> -->
        <association property="supporter" javaType="supporter">
            <id column="sno" property="no" />
            <result column="name" property="name" />
            <result column="bas_addr" property="baseaddr" />
            <result column="det_addr" property="detailaddr" />
            <result column="genre" property="sgnere" />
            <result column="capa" property="capa" />
            <result column="tel" property="tel" />
            <result column="etc" property="message" />
            <result column="x" property="x" />
            <result column="y" property="y" />
        </association>
        <collection property="stagephotos" ofType="StagePhoto">
	        <id column="spno"      property="spno"/>
	        <result column="phot"  property="photo"/>
        </collection>
    </resultMap>

    <resultMap type="Schedule" id="UnableStageScheduleMap">
        <id column="ssno" property="sno" />
        <result column="name" property="shopname" />
        <result column="addr" property="addr" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <result column="cnt" property="cnt" />
        <result column="flag" property="flag" />
        <result column="cdt" property="cdt" />
        <result column="x" property="x" />
        <result column="y" property="y" />
        <association property="supporter" javaType="supporter">
            <id column="sno" property="no" />
            <result column="bas_addr" property="baseaddr" />
            <result column="det_addr" property="detailaddr" />
            <result column="genre" property="sgnere" />
            <result column="capa" property="capa" />
            <result column="tel" property="tel" />
            <result column="etc" property="message" />
        </association>
    </resultMap>

    <resultMap type="Schedule" id="ShowReqsToSupporterMap">
        <id column="brno" property="sno" />
        <result column="cdt" property="cdt" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <result column="cnt" property="cnt" />
        <result column="flag" property="flag" />
        <!-- <result column="x" property="x"/> <result column="y" property="y"/> -->
        <association property="busker" javaType="Busker">
            <id column="bno" property="no" />
            <result column="name" property="teamname" />
            <result column="genre" property="teamgenre" />
            <result column="city" property="city" />
            <result column="inst" property="instrument" />
            <result column="intro" property="teamInfo" />
            <result column="phot" property="teamPhoto" />
            <result column="tel" property="tel" />
            <result column="lcnt" property="likecount" />
            <result column="cont" property="message" />
        </association>
    </resultMap>

    <resultMap type="Schedule" id="showDetailMap">
        <id column="brno" property="sno" />
        <result column="cdt" property="cdt" />
        <result column="cnt" property="cnt" />
        <result column="flag" property="flag" />
        <association property="busker" javaType="Busker">
            <id column="bno" property="no" />
            <result column="name" property="teamname" />
            <result column="genre" property="teamgenre" />
            <result column="city" property="city" />
            <result column="inst" property="instrument" />
            <result column="intro" property="teamInfo" />
            <result column="phot" property="teamPhoto" />
            <result column="tel" property="tel" />
            <result column="lcnt" property="likecount" />
            <result column="cont" property="message" />
        </association>
        <collection property="scheduletime" ofType="ScheduleTime">
            <result column="ssno" property="sssno"/>
            <result column="sdt" property="ssdt" />
            <result column="edt" property="sedt" />
        </collection>
    </resultMap>

    <resultMap type="Schedule" id="todayScheduleMap">
        <id column="brno" property="sno" />
        <result column="shopname" property="shopname" />
        <result column="addr" property="addr" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <association property="busker" javaType="busker">
            <result column="teamname" property="teamname" />
            <result column="genre" property="teamgenre"/>
        </association>
        <association property="supporter" javaType="supporter">
            <id column="sno" property="no" />
            <result column="name" property="name"/>
            <result column="addr" property="baseaddr" />
            <result column="det_addr" property="detailaddr" />
            <result column="tel" property="tel" />
            <result column="x" property="x" />
            <result column="y" property="y" />
        </association>
    </resultMap>
    
    
    <resultMap type="Schedule" id="ScheduleMap">
         <id column="sno" property="sno" />
         <result column="addr" property="addr"/>
         <result column="sdt" property="sdt"/>
         <result column="edt" property="edt"/>
        <association property="busker" javaType="busker">
            <id column="bno"   property="bno"/>
            <result column="name" property="teamname" />
            <result column="genre" property="teamgenre"/>
        </association>
<!--         <association property="supporter" javaType="supporter">
            <result column="x" property="x" />
            <result column="y" property="y" />
        </association>
 -->    </resultMap>
 
    <resultMap type="Schedule" id="MapscheduleMap">
        <id column="brno" property="sno" />
        <result column="shopname" property="shopname" />
        <result column="addr" property="addr" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <result column="cnt" property="cnt" />
        <result column="cdt" property="cdt" />
        <result column="flag" property="flag" />
        <result column="x" property="x" />
        <result column="y" property="y" />
        <result column="phot" property="phot" />
        <result column="bno" property="bno" />
        <result column="name" property="bname" />
    </resultMap>
    
    <resultMap type="Schedule" id="nperscheduleMap">
        <id column="psno" property="sno" />
        <result column="shopname" property="shopname" />
        <result column="addr" property="addr" />
        <result column="sdt" property="sdt" />
        <result column="edt" property="edt" />
        <result column="cnt" property="cnt" />
        <result column="cdt" property="cdt" />
        <result column="flag" property="flag" />
        <result column="x" property="x" />
        <result column="y" property="y" />
        <association property="busker" javaType="busker">
            <id column="bno"   property="bno"/>
            <result column="name" property="teamname" />
            <result column="genre" property="teamgenre"/>
        </association>
    </resultMap>
    
 <!-- 스케줄조회 : 확정 버스커 스케줄 출력하는 쿼리  -->
 <select id="findbydate" resultMap="buskerscheduleMap" parameterType="map">
    SELECT 
           BR.brno,
           S.name as name,
           S.bas_addr,
           MIN(SC.sdt) as sdt,
           MAX(SC.edt) as edt,
           BR.cnt,
           BS.flag, 
           BR.cdt, 
           S.x, 
           S.y 
      FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
     WHERE B.bno=BR.bno
       AND BR.brno=BS.brno 
       AND BS.ssno=SC.ssno
       AND SC.sno = S.sno
       AND BR.bno=#{bno}
       AND SUBSTR(SC.sdt,1,10) = #{date}
  GROUP BY BS.brno
 </select>
 
 <!-- 스케줄조회 : 확정 버스커 스케줄 출력하는 쿼리  -->
 <select id="findbyflag" resultMap="buskerscheduleMap" parameterType="map">
    SELECT 
           BR.brno,
           S.name as name,
           S.bas_addr as addr,
           MIN(SC.sdt) as sdt,
           MAX(SC.edt) as edt,
           BR.cnt,
           BS.flag, 
           BR.cdt, 
           S.x, 
           S.y 
      FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
     WHERE B.bno=BR.bno
       AND BR.brno=BS.brno 
       AND BS.ssno=SC.ssno
       AND SC.sno = S.sno
       AND BS.flag=#{flag}
  GROUP BY BS.brno
  limit #{rowNo}, #{size}
 </select>
 
 <select id="findbypsno" resultMap="nperscheduleMap" parameterType="int">
 SELECT PS.psno,
        PS.sdt,
        PS.edt,
        PS.cdt, 
        PS.addr, 
        PS.x, 
        PS.y, 
        PS.cdt, 
        PS.cnt,
        B.bno, 
        B.name,
        B.genre
  FROM per_sche PS, busk B
 WHERE PS.bno = B.bno
   AND PS.psno=#{value}
 </select>
 
 <select id="findbybrno" resultMap="reqStageScheduleMap" parameterType="int">
     SELECT 
            SCH.brno,
            SCH.cdt,
            SCH.name,
            SCH.x,
            SCH.y,
            SCH.genre, 
            SCH.tel, 
            SCH.bas_addr, 
            SCH.det_addr,
            SCH.etc,
            SCH.sno, 
            SCH.edt ,
            SCH.sdt,
            SP.spno,
            SP.phot
       FROM 
		    (SELECT BS.brno,
		            BR.cdt,
		            S.name,
		            S.x,
		            S.y,
		            S.genre, 
		            S.tel, 
		            S.bas_addr, 
		            S.det_addr,
		            S.etc,
		            S.sno, 
		            MAX(SC.edt) as edt ,
		            MIN(SC.sdt)as sdt
		        FROM busk_req BR, busk_stag BS, stag_sche SC, sup S
		       WHERE BR.brno=BS.brno
		         AND BS.ssno=SC.ssno
		         AND SC.sno=S.sno
		         AND BS.brno=#{value}
		    GROUP BY BS.brno) SCH, stag_phot SP 
       WHERE SCH.sno=SP.sno
  </select>
  
	
	<!-- 메인 오늘의 일정 뽑는 리스트 -->
	<select id="findTodaySchedule"
		resultMap="todayScheduleMap" parameterType="String">	
    SELECT
        S.bas_addr as addr,
        S.x,
        S.y,
        S.name,
        MIN(SC.sdt) as sdt,
        MAX(SC.edt) as edt,
        B.name as teamname,
        B.genre
        FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
        WHERE B.bno=BR.bno
        AND BR.brno=BS.brno
        AND BS.ssno=SC.ssno
        AND SC.sno = S.sno
        AND BS.flag=2
        <![CDATA[  
        AND CURRENT_DATE <= SC.sdt
        AND CURRENT_DATE+1 > SC.sdt
        ]]>
        <if test="_parameter != null">
        AND S.bas_addr LIKE CONCAT('%',#{city},'%')
        </if>
        GROUP BY BS.brno
        UNION
          SELECT p.addr, p.x, p.y, p.shopname as name, MiN(sdt) as sdt, MAX(edt) as edt, b.name as teamname, b.genre
            FROM busk b, per_sche p
           WHERE p.bno=b.bno
           <![CDATA[
             AND CURRENT_DATE <= sdt
             AND CURRENT_DATE+1 > sdt
             ]]>
             <if test="_parameter != null">
             AND p.addr LIKE CONCAT('%',#{city},'%')
            </if>
        GROUP BY psno
	</select>

<!-- 무대제공자 스케쥴 추가: 해당 번호에 해당하는 무대 일정을 입력하는 쿼리 -->
<insert id="insertStageDates" parameterType="list"
useGeneratedKeys="true" keyColumn="ssno" keyProperty="sno">
INSERT INTO `stag_sche`(sdt, edt, sno)
values
<foreach collection="list" item="arr" separator=" , ">
(#{arr.nsdt},#{arr.nedt},#{arr.supporter.no})
</foreach>
</insert>

<!-- 무대제공자 스케쥴  추가: 해당 데이터가 잘 추가되었는지 확인해주는 쿼리 -->
<select id="chkinsertDates" parameterType="map" resultType="int">
select count(*) from stag_sche
where sno = #{no} and sdt in 
  <foreach collection="dates" item="arr" separator="," open="(" close=")">
#{arr.nsdt}
  </foreach>
</select>

<delete id="perscheduledelete" parameterType="int">
delete from per_sche
 where psno=#{value} 
</delete>

<!-- 무대사용요청스케줄 테이블 삭제 -->
<delete id="buskstagdelete" parameterType="int">
delete from busk_stag
 where brno=#{value} 
</delete>

<!-- 버스킹 무대사용 요청 테이블 삭제 -->
<delete id="buskreqdelete" parameterType="int">
delete from busk_req
 where brno=#{value} 
</delete>

<!-- 무대제공자: 과거 날짜를 볼 시 -->
<select id="showpast" parameterType="map" resultMap="ShowReqsToSupporterMap">
SELECT b.name, ss.sdt, ss.edt
FROM stag_sche as ss, busk_stag as bs, busk_req as br, busk as b
WHERE ss.ssno = bs.ssno and bs.brno=br.brno and br.bno=b.bno and 
ss.sno =#{no} and sdt LIKE '#{date}%' AND bs.flag=2
</select>


<!-- 개인피드에 들어갈 확정스케줄 리스트 -->
<select id="findbynoperfeedschedule" resultMap="perscheduleMap" parameterType="int">
select PS.shopname, PS.addr, PS.sdt, PS.edt
from per_sche PS, busk B 
where PS.bno = B.bno   
and B.bno=#{no}
and substr(PS.sdt,1,10)>=substr(now(),1,10)
</select>
	    
<!-- 개인피드에 들어갈 확정스케줄 리스트 -->
<select id="findbynofixfeedschedule" resultMap="reqStageScheduleMap" parameterType="int">
SELECT S.name, S.bas_addr,S.det_addr, MIN(SS.sdt) AS sdt, MAX(SS.edt) AS edt
FROM busk B, busk_req BR, busk_stag BS,stag_sche SS, sup S
WHERE B.bno=BR.bno
AND BR.brno=BS.brno
AND BS.ssno=SS.ssno
AND SS.sno=S.sno
AND B.bno=#{no}
AND BS.flag=2
and substr(SS.sdt,1,10)>=substr(now(),1,10)
GROUP BY BS.brno
</select>

	<select id="findperschedule" resultMap="perscheduleMap" parameterType="map">
		select PS.psno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, PS.cdt, PS.x,
		PS.y
		from per_sche PS, busk B
		where PS.bno = B.bno
		and B.bno=#{bno}
		and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
		limit #{rowNo}, #{size}
	</select>

	<insert id="insertperschedule" parameterType="Schedule"
		useGeneratedKeys="true" keyColumn="psno" keyProperty="psno">
		insert into per_sche(sdt,edt,addr,x,y,shopname,cdt,cnt,bno)
		values(#{nsdt},#{nedt},#{addr},#{x},#{y},#{shopname},now(),#{cnt},#{bno})
	</insert>

	<!-- 스케줄조회 : 확정 버스커 스케줄 출력하는 쿼리 -->
	<select id="findfixdSchedule" resultMap="buskerscheduleMap"
		parameterType="map">
		SELECT
		BR.brno,
		S.name as name,
		S.bas_addr as addr,
		MIN(SC.sdt) as sdt,
		MAX(SC.edt) as edt,
		BR.cnt,
		BS.flag,
		BR.cdt,
		S.x,
		S.y,
		B.genre
		FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
		WHERE B.bno=BR.bno
		AND BR.brno=BS.brno
		AND BS.ssno=SC.ssno
		AND SC.sno = S.sno
		AND BS.flag=2
		GROUP BY BS.brno
		limit #{rowNo}, #{size}
	</select>

	<!-- 스케줄조회 : 확정 버스커 스케줄 출력하는 쿼리 -->
	<select id="findMyReqSchedule" resultMap="buskerscheduleMap"
		parameterType="map">
		SELECT
		BR.brno,
		S.name as name,
		S.bas_addr as addr,
		MIN(SC.sdt) as sdt,
		MAX(SC.edt) as edt,
		BR.cnt,
		BS.flag,
		BR.cdt,
		S.x,
		S.y
		FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
		WHERE B.bno=BR.bno
		AND BR.brno=BS.brno
		AND BS.ssno=SC.ssno
		AND SC.sno = S.sno
		AND BR.bno=#{bno}
		GROUP BY BS.brno
		HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)
		limit #{rowNo}, #{size}
	</select>

	<!-- 무대제공자 스케줄조회: 무대신청,완료된 목록을 보여주는 쿼리 -->
	<select id="findreqschedule" parameterType="map"
		resultMap="ShowReqsToSupporterMap">
		select b.name, b.genre, min(ss.sdt) as sdt, max(ss.edt)as edt, br.cnt,
		bs.flag, br.cdt, br.brno
		from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
		where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
		GROUP BY br.brno
		order by ss.sdt desc
		Limit #{paging.startRowNo},#{paging.pageSize}
	</select>

	<!-- 무대제공자 스케줄조회: 무대신청,완료된 목록을 보여주는 쿼리(플래그로) -->
	<select id="findSuggestsbyflag" parameterType="map"
		resultMap="ShowReqsToSupporterMap">
		select b.name, b.genre, min(ss.sdt)as sdt, max(ss.edt)as edt, br.cnt,
		bs.flag, br.cdt, br.brno
		from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
		where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
		<choose>
		<when test='flag == 1'>
		and flag=#{flag} and ss.sdt &gt; CURDATE() + INTERVAL 1 DAY
		</when>
		</choose>
        and flag=#{flag}
		GROUP BY br.brno
		order by ss.sdt desc
		Limit #{paging.startRowNo},#{paging.pageSize}
	</select>

	<!-- 무대제공자 스케쥴조회: 해당 날짜에 사용불가능한 목록을 뽑아주는 쿼리 -->
	<select id="findunableSchedule" parameterType="map"
		resultMap="UnableStageScheduleMap">
		SELECT sdt, edt, sno, ssno
		from stag_sche
		where sno=#{no} and substring_index(sdt,' ',1) = #{date};
	</select>

	<!-- 무대제공자 스케쥴 삭제: 해당 번호에 해당하는 버스커요청스케쥴을 지워주는 쿼리 -->
	<delete id="removeStageDatesinbuskStag"
		parameterType="ArrayList">
		delete from busk_stag
		where ssno in
		<foreach collection="list" item="arr" separator="," open="("
			close=")">
			#{arr}
		</foreach>
		and flag = 1
	</delete>

	<!-- 무대제공자 스케쥴 삭제: 해당 번호에 해당하는 무대스케쥴을 지워주는 쿼리 -->
	<delete id="removeStageDatesinStagSche"
		parameterType="ArrayList">
		delete from stag_sche
		where ssno in
		<foreach collection="list" item="arr" separator="," open="("
			close=")">
			#{arr}
		</foreach>
	</delete>

	<!-- 무대제공자 스케쥴조회: 상세보기에 출력할 팀 정보 -->
	<select id="showDatail" parameterType="int" resultMap="showDetailMap">
		SELECT b.name, b.genre, b.tel, b.lcnt, b.bno, br.cont, br.brno, ss.sdt,b.phot,
		ss.edt, bs.flag, ss.ssno
		from busk as b, busk_req as br, busk_stag as bs, stag_sche as ss
		where b.bno=br.bno and br.brno = bs.brno and bs.ssno = ss.ssno and
		br.brno=#{no}
	</select>

  <!-- SELECT S.name, S.bas_addr,S.det_addr, MIN(SS.sdt) AS sdt, MAX(SS.edt) AS edt
  FROM busk B, busk_req BR, busk_stag BS,stag_sche SS, sup S
  WHERE B.bno=BR.bno
        AND BR.brno=BS.brno
        AND BS.ssno=SS.ssno
        AND SS.sno=S.sno
        AND B.bno=#{no}
        AND BS.flag=2
        and substr(PS.sdt,1,10)>=substr(now(),1,10)
        GROUP BY BS.brno
    </select> -->
    
<select id="checkreqschedule" parameterType="map" resultType="int">
    SELECT COUNT(*)
	  FROM (SELECT SS.sdt as sdt, SS.edt as edt
	          FROM busk B, busk_req BR, busk_stag BS, stag_sche SS 
	         WHERE B.bno = BR.bno
	           AND BR.brno = BS.brno
	           AND BS.ssno = SS.ssno
	           AND B.bno=#{bno}
	         GROUP BY BS.brno
	       ) c
	 WHERE sdt BETWEEN #{sdt} and #{edt}
	    OR edt BETWEEN #{sdt} and #{edt}
</select>

<select id="checkperschedule" parameterType="map" resultType="int">
    SELECT count(sdt)
      FROM per_sche
     WHERE (sdt BETWEEN #{sdt} and #{edt}
        OR edt BETWEEN #{sdt} and #{edt})
       AND bno=#{bno}
</select>    

<update id='editperschedule' parameterType="Schedule" >
    update per_sche
       set sdt=#{nsdt}, edt=#{nedt}, addr=#{addr}, x=#{x}, y=#{y}, shopname=#{shopname}, cnt=#{cnt}, cdt=now()
     where psno=#{sno}

</update>
    
	
    <!-- 전체일정 출력 -->
    <select id="showScedule" resultMap="ScheduleMap" parameterType="map">
    (select b.name, ps.addr, ps.sdt,ps.edt, b.bno
     from per_sche as ps, busk as b
     where ps.bno = b.bno AND ps.sdt>=curdate())

    UNION ALL

    (select b.name, concat(s.bas_addr,' ',s.det_addr)as addr, ss.sdt,ss.edt, b.bno
    from busk_stag as bs, busk as b, sup as s, stag_sche as ss, busk_req as br
    where bs.ssno=ss.ssno and bs.brno=br.brno and ss.sno=s.sno and br.bno=b.bno AND ss.sdt>=curdate() 
    AND bs.flag='2'
    GROUP BY br.brno
    )
    ORDER BY sdt  
    Limit #{paging.startRowNo},#{paging.pageSize}    
    </select>
	
	<select id="showSsnos" parameterType="int" resultType="int">
	select ssno as sno
	from busk_stag
	where brno = #{no}
	</select>
	
	<update id="consentapply" parameterType="ArrayList">
	UPDATE busk_stag 
    SET flag='2'
    WHERE ssno in 
    <foreach collection="list" item="no" open="(" close=")" separator=",">
    #{no}
    </foreach>
	</update>
	
	<delete id="refuseapply" parameterType="ArrayList">
	DELETE FROM `busk_stag` WHERE ssno in 
	<foreach collection="list" item="no" open="(" close=")" separator=",">
	#{no}
	</foreach>
	</delete>

    <!-- 버스커: 신청 가능한 무대일정 뽑기 -->
    <select id="findPossibleStages" parameterType="map" resultMap="UnableStageScheduleMap" >
    select ss.ssno, ss.sdt, ss.edt from stag_sche ss LEFT outer join busk_stag bs 
    ON ss.ssno = bs.ssno where bs.ssno is null and ss.sno = #{no} and 
    ss.sdt LIKE CONCAT(#{date},'%') group by ss.ssno order by ss.sdt
    </select>
    
   <insert id="ApplyStagesinBuskreq" parameterType="map"
   useGeneratedKeys="true" keyColumn="brno" keyProperty="sno">
   INSERT INTO `busk_req`(`bno`, `cont`, `cdt`, `cnt`) 
   VALUES (#{bno},#{cont},now(),#{count})
    <selectKey resultType="integer" keyProperty="brno" order="AFTER">
    SELECT LAST_INSERT_ID()
    </selectKey>
   </insert>
   
   
   <!-- 스케줄조회 : 확정 버스커 스케줄 출력하는 쿼리 -->
    <select id="findMyAllSchedulebyflag" resultMap="buskerscheduleMap"
        parameterType="map">
        SELECT
        BR.brno,
        S.name as name,
        S.bas_addr as addr,
        MIN(SC.sdt) as sdt,
        MAX(SC.edt) as edt,
        BR.cnt,
        BS.flag,
        BR.cdt,
        S.x,
        S.y
        FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
        WHERE B.bno=BR.bno
        AND BR.brno=BS.brno
        AND BS.ssno=SC.ssno
        AND SC.sno = S.sno
        AND BR.bno=#{bno}
        AND BS.flag=#{flag}
        GROUP BY BS.brno
        HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)
    </select>
    
    
   <insert id="ApplyStagesinBuskstag" parameterType="map">
   INSERT INTO `busk_stag`(`ssno`, `brno`, `flag`) values
   <foreach collection="list" item="item" separator=",">
    (#{item},#{brno},'1')
    </foreach>
   </insert>

    <select id="totFindreqschedule" parameterType="int" resultType="Integer">
    select count(*)
    FROM (SELECT b.name, b.genre, min(ss.sdt) as sdt, max(ss.edt)as edt, br.cnt,
          bs.flag, br.cdt, br.brno
          from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
          where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
          GROUP BY br.brno)as b
    </select>

    <select id="totfindSuggestsbyflag" parameterType="map" resultType="Integer">
    select count(*)
    FROM (select b.name, b.genre, min(ss.sdt)as sdt, max(ss.edt)as edt, br.cnt,
        bs.flag, br.cdt, br.brno
        from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
        where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
        <choose>
        <when test='flag == 1'>
        and flag=#{flag} and ss.sdt &gt; CURDATE() + INTERVAL 1 DAY
        </when>
        </choose>
        and flag=#{flag}
        GROUP BY br.brno)as b
    </select>

<select id="checkeditreqschedule" parameterType="map" resultType="int">
    SELECT COUNT(*) 
      FROM 
            (SELECT sdt, edt
               FROM (SELECT SS.sdt as sdt, SS.edt as edt
                       FROM busk B, busk_req BR, busk_stag BS, stag_sche SS 
                      WHERE B.bno = BR.bno
                        AND BR.brno = BS.brno
                        AND BS.ssno = SS.ssno
                        AND B.bno=#{bno}
                   GROUP BY BS.brno
                     ) c
              WHERE sdt NOT BETWEEN #{sdt} and #{edt}
                AND edt NOT BETWEEN #{sdt} and #{edt}
             ) d
     WHERE sdt BETWEEN #{nsdt} and #{nedt}
        OR edt BETWEEN #{nsdt} and #{nedt}
</select>

<select id="checkeditperschedule" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM(SELECT sdt, edt
           FROM per_sche
          WHERE sdt NOT BETWEEN #{sdt} and #{edt}
            AND edt NOT BETWEEN #{sdt} and #{edt}
            AND bno=#{bno}
        )  c
   WHERE sdt BETWEEN #{nsdt} and #{nedt}
      OR edt BETWEEN #{nsdt} and #{nedt}
</select>    

    <select id="searchSchedule" resultMap="ScheduleMap">
   (select b.name, ps.addr, ps.sdt,ps.edt, b.bno
    from per_sche as ps, busk as b
    where ps.bno = b.bno AND ps.sdt>=curdate() and
    <choose>
       <when test="type.equals('team')">
       b.name=#{keyword})
       </when>
       <when test="type.equals('city')">
       ps.addr like concat('%',#{keyword},'%'))
       </when>
       <when test="type.equals('date')">
       ps.sdt >=#{date})
       </when>
       </choose>

   UNION ALL

   (select b.name, concat(s.bas_addr,' ',s.det_addr)as addr, ss.sdt,ss.edt, b.bno
   from busk_stag as bs, busk as b, sup as s, stag_sche as ss, busk_req as br
   where bs.ssno=ss.ssno and bs.brno=br.brno and ss.sno=s.sno and br.bno=b.bno AND ss.sdt>=curdate()
   AND bs.flag='2' and
        <choose>
       <when test="type.equals('team')">
       b.name=#{keyword})
       </when>
       <when test="type.equals('city')">
       s.bas_addr like concat('%',#{keyword},'%'))
       </when>
       <when test="type.equals('date')">
       ss.sdt >= #{date})
       </when>
       </choose>
   ORDER BY sdt
   Limit #{paging.startRowNo},#{paging.pageSize}
   </select>
    
    <select id="findoverdue" parameterType="map"  resultMap="ShowReqsToSupporterMap">
    select b.name, b.genre, min(ss.sdt)as sdt, max(ss.edt)as edt, br.cnt,
        bs.flag, br.cdt, br.brno
        from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
        where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
        and flag=1 AND ss.sdt &lt; CURDATE() + INTERVAL 1 DAY
        GROUP BY br.brno
        order by ss.sdt desc
        Limit #{paging.startRowNo},#{paging.pageSize}
    </select>
    
       <select id="totfindoverdue" parameterType="int"  resultType="Integer">
    select count(*) 
    from (select b.name, b.genre, min(ss.sdt)as sdt, max(ss.edt)as edt, br.cnt,
          bs.flag, br.cdt, br.brno
          from busk_stag as bs, stag_sche as ss, busk as b, busk_req as br
          where bs.ssno = ss.ssno and bs.brno=br.brno and br.bno=b.bno and ss.sno=#{no}
          and flag=1 AND ss.sdt &lt; CURDATE() + INTERVAL 1 DAY
          GROUP BY br.brno) as b
    </select>

<delete id="refuseAllinReq" parameterType="int">
delete from busk_req
where brno = #{no}
</delete>

<delete id="refuseAllinBusk" parameterType="int">
delete from busk_stag
where brno = #{no}
</delete>
    <select id="totSchedule" resultType="Integer">
    select count(*)
    from
    ((select b.name, ps.addr, ps.sdt,ps.edt, b.bno
     from per_sche as ps, busk as b
     where ps.bno = b.bno AND ps.sdt>=curdate())

    UNION ALL

    (select b.name, concat(s.bas_addr,' ',s.det_addr)as addr, ss.sdt,ss.edt, b.bno
    from busk_stag as bs, busk as b, sup as s, stag_sche as ss, busk_req as br
    where bs.ssno=ss.ssno and bs.brno=br.brno and ss.sno=s.sno and br.bno=b.bno AND ss.sdt>=curdate() 
    AND bs.flag='2'
    GROUP BY br.brno
    )) as b
    </select>

<select id="findperschedulecnt" parameterType="int" resultType="int">
        select COUNT(*)
        from per_sche PS, busk B
        where PS.bno = B.bno
        and B.bno=#{value}
        and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
    </select>


<select id="findMyReqSchedulecnt" parameterType="int" resultType="int">
        SELECT
                 COUNT(*)
        FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
        WHERE B.bno=BR.bno
        AND BR.brno=BS.brno
        AND BS.ssno=SC.ssno
        AND SC.sno = S.sno
        AND BR.bno=#{value}
        GROUP BY BS.brno
        HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)
    </select>


<select id="findMyAllSchedulebyflagcnt" 
        parameterType="map" resultType="int">
SELECT COUNT(*)
  FROM (
        SELECT
            sdt
        FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
        WHERE B.bno=BR.bno
        AND BR.brno=BS.brno
        AND BS.ssno=SC.ssno
        AND SC.sno = S.sno
        AND BR.bno=#{bno}
        AND BS.flag=#{flag}
        GROUP BY BS.brno
        HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)
        ) S
    </select>
    
<select id="findMyAllSchedule" resultMap="buskerscheduleMap"
        parameterType="map">
SELECT 
		brno, 
		name, 
		addr, 
		sdt,
		edt, 
		cnt,
		flag, 
		cdt,
		x,
		y
  FROM(
		  (SELECT 
		        PS.psno as brno, 
		        PS.shopname as name, 
		        PS.addr, 
		        PS.sdt,
		        PS.edt, 
		        PS.cnt,
		        3 as flag, 
		        PS.cdt,
		        PS.x,
		        PS.y       
		   FROM per_sche PS, busk B
		  WHERE PS.bno = B.bno
		    and B.bno=#{bno}
		    and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
		   UNION
		  SELECT
		        BR.brno,
		        S.name as name,
		        S.bas_addr as addr,
		        MIN(SC.sdt) as sdt,
		        MAX(SC.edt) as edt,
		        BR.cnt,
		        BS.flag,
		        BR.cdt,
		        S.x,
		        S.y
		    FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
		   WHERE B.bno=BR.bno
		     AND BR.brno=BS.brno
		     AND BS.ssno=SC.ssno
		     AND SC.sno = S.sno
		     AND BR.bno=#{bno}
		GROUP BY BS.brno
		  HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)) ASD
        )
    limit #{rowNo}, #{size}
</select>

<select id="findMyAllSchedulecnt" parameterType="int" resultType="int">
  SELECT 
        COUNT(*)
  FROM(
          (SELECT 
                PS.psno as brno, 
                PS.shopname as name, 
                PS.addr, 
                PS.sdt,
                PS.edt, 
                PS.cnt,
                3 as flag, 
                PS.cdt,
                PS.x,
                PS.y       
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and B.bno=#{bno}
            and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
           UNION
          SELECT
                BR.brno,
                S.name as name,
                S.bas_addr as addr,
                MIN(SC.sdt) as sdt,
                MAX(SC.edt) as edt,
                BR.cnt,
                BS.flag,
                BR.cdt,
                S.x,
                S.y
            FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
           WHERE B.bno=BR.bno
             AND BR.brno=BS.brno
             AND BS.ssno=SC.ssno
             AND SC.sno = S.sno
             AND BR.bno=#{bno}
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)) ASD
        )
</select>  
    
   
<select id="findAllSchedule" resultMap="MapscheduleMap"
        parameterType="map">
SELECT 
        brno, shopname, addr, sdt, edt, cnt, flag, cdt, x, y, phot, bno, name
  FROM(
          (SELECT 
                PS.psno as brno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, 3 as flag, 
                PS.cdt,
                PS.x,
                PS.y,
                B.phot,
                B.bno,
                B.name       
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
           UNION
          SELECT
                BR.brno, S.name as shopname, S.bas_addr as addr, MIN(SC.sdt) as sdt, MAX(SC.edt) as edt,
                BR.cnt, BS.flag, BR.cdt, S.x, S.y, B.phot, B.bno, B.name
            FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
           WHERE B.bno=BR.bno
             AND BR.brno=BS.brno
             AND BS.ssno=SC.ssno
             AND SC.sno = S.sno
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)) ASD
        )
</select>

<select id="findSearchAllSchedule" resultMap="MapscheduleMap"
        parameterType="map">
SELECT 
        brno, shopname, addr, sdt, edt, cnt, flag, cdt, x, y, phot, bno, name
  FROM(
          (SELECT 
                PS.psno as brno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, 3 as flag, 
                PS.cdt,
                PS.x,
                PS.y,
                B.phot,
                B.bno,
                B.name
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and SUBSTR(PS.sdt,1,10) >= SUBSTR(NOW(),1,10)
           UNION
          SELECT
                BR.brno, S.name as shopname, S.bas_addr as addr, MIN(SC.sdt) as sdt, MAX(SC.edt) as edt,
                BR.cnt, BS.flag, BR.cdt, S.x, S.y, B.phot, B.bno, B.name
            FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
           WHERE B.bno=BR.bno
             AND BR.brno=BS.brno
             AND BS.ssno=SC.ssno
             AND SC.sno = S.sno
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) >= SUBSTR(NOW(),1,10)) ASD
        )
 WHERE addr like CONCAT('%',#{keyword1},'%') 
    OR addr like CONCAT('%',#{keyword2},'%');
</select>

<select id="findTodayAllSchedule" resultMap="MapscheduleMap"
        parameterType="map">
SELECT 
        brno, shopname, addr, sdt, edt, cnt, flag, cdt, x, y, phot, bno, name
  FROM(
          (SELECT 
                PS.psno as brno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, 3 as flag, 
                PS.cdt,
                PS.x,
                PS.y,
                B.phot,
                B.bno,
                B.name
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and SUBSTR(PS.sdt,1,10) = SUBSTR(NOW(),1,10)
           UNION
          SELECT
                BR.brno, S.name as shopname, S.bas_addr as addr, MIN(SC.sdt) as sdt, MAX(SC.edt) as edt,
                BR.cnt, BS.flag, BR.cdt, S.x, S.y, B.phot, B.bno, B.name
            FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
           WHERE B.bno=BR.bno
             AND BR.brno=BS.brno
             AND BS.ssno=SC.ssno
             AND SC.sno = S.sno
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) = SUBSTR(NOW(),1,10)) ASD
        )
  ORDER BY sdt ASC;
</select>


<select id="findTodaySearchSchedule" resultMap="MapscheduleMap"
        parameterType="map">
SELECT 
        brno, shopname, addr, sdt, edt, cnt, flag, cdt, x, y, phot, bno, name
  FROM   
        (SELECT 
                PS.psno as brno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, 3 as flag, 
                PS.cdt,
                PS.x,
                PS.y,
                B.phot,
                B.bno,
                B.name  
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and SUBSTR(PS.sdt,1,10) = SUBSTR(NOW(),1,10)
          UNION
         SELECT
                BR.brno, S.name as shopname, S.bas_addr as addr, MIN(SC.sdt) as sdt, MAX(SC.edt) as edt,
                BR.cnt, BS.flag, BR.cdt, S.x, S.y, B.phot, B.bno, B.name
           FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
          WHERE B.bno=BR.bno
            AND BR.brno=BS.brno
            AND BS.ssno=SC.ssno
            AND SC.sno = S.sno
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) = SUBSTR(NOW(),1,10)) asd
 WHERE addr like concat('%',#{keyword1},'%')
    OR addr like concat('%',#{keyword2},'%')
    order by sdt asc
</select>
    
     <select id="totsearchSchedule" resultType="Integer" parameterType="map">
    
    select count(*) from 
    ((select b.name, ps.addr, ps.sdt,ps.edt, b.bno
     from per_sche as ps, busk as b
     where ps.bno = b.bno AND ps.sdt>=curdate() and
     <choose>
        <when test="type.equals('team')">
        b.name=#{keyword})
        </when>
        <when test="type.equals('city')">
        ps.addr like concat('%',#{keyword},'%'))
        </when>
        <when test="type.equals('date')">
        ps.sdt like concat(#{date},'%'))
        </when>
        </choose>

    UNION ALL

    (select b.name, concat(s.bas_addr,' ',s.det_addr)as addr, ss.sdt,ss.edt, b.bno
    from busk_stag as bs, busk as b, sup as s, stag_sche as ss, busk_req as br
    where bs.ssno=ss.ssno and bs.brno=br.brno and ss.sno=s.sno and br.bno=b.bno AND ss.sdt>=curdate() 
    AND bs.flag='2' and 
         <choose>
        <when test="type.equals('team')">
        b.name=#{keyword})) as b
        </when>
        <when test="type.equals('city')">
        s.bas_addr like concat('%',#{keyword},'%')))asb
        </when>
        <when test="type.equals('date')">
        ss.sdt like concat(#{date},'%')))As b
        </when>
        </choose>
    </select>
    
    
<select id="findbywordSearchAllSchedule" resultMap="MapscheduleMap"
        parameterType="String">
SELECT 
        brno, shopname, addr, sdt, edt, cnt, flag, cdt, x, y, phot, bno, name
  FROM(
          (SELECT 
                PS.psno as brno, PS.shopname, PS.addr, PS.sdt, PS.edt, PS.cnt, 3 as flag, 
                PS.cdt,
                PS.x,
                PS.y,
                B.phot,
                B.bno,
                B.name
           FROM per_sche PS, busk B
          WHERE PS.bno = B.bno
            and SUBSTR(PS.sdt,1,10) = SUBSTR(NOW(),1,10)
           UNION
          SELECT
                BR.brno, S.name as shopname, S.bas_addr as addr, MIN(SC.sdt) as sdt, MAX(SC.edt) as edt,
                BR.cnt, BS.flag, BR.cdt, S.x, S.y, B.phot, B.bno, B.name
            FROM busk B, busk_req BR, busk_stag BS,stag_sche SC, sup S
           WHERE B.bno=BR.bno
             AND BR.brno=BS.brno
             AND BS.ssno=SC.ssno
             AND SC.sno = S.sno
        GROUP BY BS.brno
          HAVING SUBSTR(sdt,1,10) = SUBSTR(NOW(),1,10)) ASD
        )
 WHERE addr like CONCAT('%',#{keyword1},'%') 
 order by sdt asc
</select>

<select id="chkRemovePossible" parameterType="int" resultType="Integer">
select count(*) from busk_stag where ssno = #{sno}
</select>
</mapper>










